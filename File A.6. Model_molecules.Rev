#########################################
# GTR+G+I nucleotide substitution model #
#   Loop over each partition            #
#########################################

# Making partitions

partition_1 <- gene28s
partition_2 <- concatenate(geneArgK_1_and_2, geneCDA_1_and_2, geneCDC_1_and_2, geneCOI_1_and_2, geneTP_1_and_2)
partition_3 <- concatenate(geneArgK_3, geneWg)
partition_4 <- concatenate(geneTP_3, geneCDA_3, geneCDC_3)
  
# Combining partitions according to the model

model <- v(partition_1, partition_2, partition_3, partition_4)

# Number of partitions
n_data_subsets <- model.size()

# all partitions are analysed under GTR+I+G model

for (i in 1:n_data_subsets) {

	# exchangeability rates for partition i
	er[i] ~ dnDirichlet(v(1,1,1,1,1,1))

	# stationary frequencies for partition i
	pi[i] ~ dnDirichlet(v(1,1,1,1))
    
	moves.append( mvSimplexElementScale(er[i], alpha=10, tune=true, weight=5) )
	moves.append( mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=5) )

	# rate matrix for partition i
	Q_mol[i] := fnGTR(er[i],pi[i]) 
  
	# Creating a discretized gamma distribution of rate categories
	alpha_mol[i] ~ dnExponential( 1.0 )
	rates_mol[i] := fnDiscretizeGamma( alpha_mol[i], alpha_mol[i], 4 )

	# Moves on the parameters to the gamma distribution
	# this move will be applied with different tuning values (lambda and weight) to help improve mixing
	moves.append( mvScale(alpha_mol[i], lambda=0.01, weight=5.0) )
	moves.append( mvScale(alpha_mol[i], lambda=0.1,  weight=3.0) )
	moves.append( mvScale(alpha_mol[i], lambda=1,    weight=1.0) )

	# The probability of a site being invariable
	pinvar[i] ~ dnBeta(1,1)
	moves.append( mvScale(pinvar[i], lambda=0.1, tune=true, weight=2.0) )
	moves.append( mvSlide(pinvar[i], delta=0.1, tune=true, weight=2.0) )

}

### Partition rate multipliers ###

# Specifing a rate multiplier for each partition

part_rate_mult ~ dnDirichlet( rep(1.0, n_data_subsets) )
moves.append( mvBetaSimplex(part_rate_mult, alpha=1.0, tune=true, weight=n_data_subsets) )
moves.append( mvDirichletSimplex(part_rate_mult, alpha=1.0, tune=true, weight=2.0) )
part_rate := part_rate_mult * (n_data_subsets)

### Creating the substitution model and clamping it with the observed standard data ###

for (i in 1:n_data_subsets) {
    phyloSeq_1[i] ~ dnPhyloCTMC(tree=psi, Q=Q_mol[i], branchRates=part_rate_mult[i], siteRates=rates_mol[i], pInv=pinvar[i], type="DNA")
    phyloSeq_1[i].clamp(model[i])
}




